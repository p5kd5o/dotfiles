#!/usr/bin/env bash
#
# Docker stuff


# Stop all running containers
alias docker-stop-all='while read -r REPLY
do
    docker stop "${REPLY}"
done < <(docker ps -q -f status=paused -f status=restarting -f status=running)'

# Kill all running containers
alias docker-kill-all='while read -r REPLY
do
    docker kill "${REPLY}"
done < <(docker ps -q -f status=paused -f status=restarting -f status=running)'

# Remove all dead containers
alias docker-rm-old='while read -r REPLY
do
    docker rm "${REPLY}"
done < <(docker ps -q -f status=dead -f status=exited)'

# Remove all containers
alias docker-rm-all='{
while read -r REPLY
do
    docker kill "${REPLY}"
done < <(docker ps -q -f status=paused -f status=restarting -f status=running)
while read -r REPLY
do
    docker rm "${REPLY}"
done < <(docker ps -q -f status=created -f status=dead -f status=exited)
}'



# Create a new jupyter notebook container
# usage: docker-jupyter [-d] [--rm] [-p host-port] [-v host-directory]
docker-jupyter()
{
    local cmd help || return

    help="${FUNCNAME[0]} [-d] [--rm] [-p host-port] [-v host-dir] [image]"

    cmd=( docker run --tty )

    while [[ $1 == -?* ]]
    do
        case $1 in
            -h|--help)
                printf 'usage: %s\n' "${help}"
                return 2
                ;;
            -p|--port)
                shift
                cmd+=( -p "${1:-"${JUPYTERPORT:-8888}"}:8888" )
                shift || break
                ;;
            -v|--volume)
                shift
                cmd+=( -v "${1:-"${JUPYTERDIR:-${PWD}}"}:/home/jovyan/work" )
                shift || break
                ;;
            -d|--detach)
                cmd+=( -d )
                shift
                ;;
            --rm)
                cmd+=( --rm )
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                printf 'usage: %s\n' "${help}" 1>&2
                return 2
        esac
    done

    if (( $# > 1 ))
    then
        printf "%s: too many arguments\n" "${FUNCNAME[0]}"
        return 2
    fi

    if (( $# ))
    then
        if [[ $1 == */* ]]
        then
            "${cmd[@]}" "$1"
        else
            "${cmd[@]}" "jupyter/$1"
        fi
    else
        read -r "cmd[${#cmd[@]}]" < <( 
        docker image ls --format='{{.Repository}}' 'jupyter/*-notebook'
        ) && "${cmd[@]}"
    fi
}


# Find and print the tokens for all running jupyter containers
# usage: docker-jupyter-tokens
docker-jupyter-tokens()
{
    local id=( ) port=( ) token=( ) || return

    while IFS='-/:' read -r "id[${#id[@]}]" _ "port[${#port[@]}]" _
    do
        if [[ "$(docker ps -aq -f "id=${id[-1]}" --format='{{.Image}}')" == jupyter/*-notebook ]]
        then
            if [[ $(docker logs "${id[-1]}") =~ https?://[^/]*/\?token=([[:alnum:]]+) ]]
            then
                token[${#token[@]}]="${BASH_REMATCH[1]}"
            fi
        fi
    done < <(docker ps -q --format='{{.ID}}/{{.Ports}}')

    printf '%-16s%-8s%-s\n' 'CONTAINER ID' 'PORT' 'TOKEN'

    for _ in "${!token[@]}"
    do
        printf '%-16s%-8s%-s\n' "${id[_]}" "${port[_]#*:}" "${token[_]}"
    done
}
