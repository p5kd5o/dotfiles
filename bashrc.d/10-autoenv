#!/bin/env bash
## Library of functions to help configure the environment


## Mapping from variables to the functions that set them
declare -A _autoenv=(
  ['EDITOR']='autoenv::EDITOR'
  ['LS_COLORS']='autoenv::LS_COLORS'
  ['GCC_COLORS']='autoenv::GCC_COLORS'
)


## If given arguments, try to configure those variables.
## Otherwise, try to configure any variables that are null.
autoenv::main()
if (( $# )); then "autoenv::$1"
  while shift; do "autoenv::$1"
  done
else set -- "${!_autoenv[@]}"
  while (( $# )); do
    [[ ! -v $1 ]] && "${_autoenv[$1]}"
    shift
  done
fi


## Sets a default text editor
autoenv::EDITOR()
if unset -v EDITOR && local -a EDITOR=(vim vi nano); then
  for EDITOR in "$@" "${EDITOR[@]}"; do
    if read -r EDITOR < <(command -pv "${EDITOR}"); then
      declare -gx EDITOR="${EDITOR}"
      return
    fi
  done
fi


## Sets command output colors
autoenv::LS_COLORS()
if wait $! && unset -v LS_COLORS; then
  read -r LS_COLORS
  if (( $# )); then
    set -- "$1"
  elif [[ -f ~/.dircolors ]]; then
    set -- ~/.dircolors
  fi
  [[ "$("${LS_COLORS}" -b "$@")" =~ ^LS_COLORS=\'([^\']*)\' ]]
  declare -gx LS_COLORS="${BASH_REMATCH[1]}"
fi < <(command -pv dircolors)


## Sets GCC output formatting
autoenv::GCC_COLORS()
if local IFS=: && unset -v GCC_COLORS && local -A GCC_COLORS=( 
    ['caret']='caret=01;32' ['error']='error=01;31'
    ['locus']='locus=01'    ['note']='note=01;36'
    ['quote']='quote=01'    ['warning']='warning=01;35'
);
then
    while (( $# )); do
      : "${1%%=*}"
      GCC_COLORS["$_"]="$_${1#"$_"}"
      shift
    done
    declare -gx GCC_COLORS="${GCC_COLORS[*]}"
fi


## Apply configuration
autoenv::main "$@"

## -- end --
