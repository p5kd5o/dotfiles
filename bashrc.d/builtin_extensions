#!/usr/bin/env bash
#
# builtin extensions (and other useful functions)


# shellcheck disable=SC1091
if [[ -f ${BASH_SOURCE[0]%/*}/libmsg ]]
then
  source -- "${BASH_SOURCE[0]%/*}/libmsg"
fi


#######################################
# fork - fork a command
#
# usage: fork command [arguments] ...
#######################################
fork()
{
  if (( $# ))
  then
    exec -- "$@" 0< /dev/null 1> /dev/null 2>&1 & disown "$!"
  else
    msg::err "${FUNCNAME[0]}" "usage" "${FUNCNAME[0]} command [args ...]"
    return 2
  fi
}


############################################################################
# cdls - cd into a directory and list it's contents
#
# usage: cdls [ls-options ...] directory
#
# @ls-options : option(s) for ls
# @directory: the name of the directory
#######################################
cdls()
{
  if (( $# ))
  then
    cd -- "${!#}" && ls "${@:1:($# ? ($# - 1) : 0)}"
  else
    msg::err "${FUNCNAME[0]}" 'usage' "${FUNCNAME[0]} [ls-opts] directory"
    return 2
  fi
}


#######################################
# mkcd - make a directory and cd into it
#
# usage: mkcd [mkdir-options ...] directory
#
# @mkdir-options : option(s) for mkdir
# @directory: the name of the directory
#######################################
mkcd()
{
  if (( $# ))
  then
    mkdir "$@" && cd -- "${!#}"
  else
    msg::err "${FUNCNAME[0]}" 'usage' "${FUNCNAME[0]} [mkdir-opts] directory"
    return 2
  fi
}


#######################################
# up - ascend through a directory tree
#
# usage: up [DEPTH]
#
# @DEPTH : number of levels to ascend
#######################################
up()
{
  if (( $# ))
  then
    if (( $# > 1 ))
    then
      printf 1>&2 '%s: usage: %s [depth]\n' "${FUNCNAME[0]}" "${FUNCNAME[0]}"
      return 2
    fi
    if ! (( $1 == $1 )) 2>/dev/null || (( $1 < 1 ))
    then
      printf 1>&2 '%s: %s: depth must be a positive integer\n' "${FUNCNAME[0]}" "$1"
      return 1
    fi
    cd "$(
    PWD="${PWD//[^/]}"
    eval 'printf %.s../ {1..'"$(( ${#PWD} < $1 ? ${#PWD} : $1 ))"'}'
    )"
  else
    cd ..
  fi
}


#######################################
# strftime - print date and time
#
# usage: strftime format
#
# @format: output format
#######################################
strftime()
{
  # shellcheck disable=SC2016
  set -- "${1@Q}" '\\D{${1@Q}}'
  set -- "${2@P}"
  eval "printf '"'%s\n'"' ${1@P}"
}


#######################################
# lswhich - print a long listing of each command
#
# usage: lstype [name] ...
#
# @name: command name(s) to list
#######################################
lswhich()
{
  local IFS REPLY || return

  while (( $# ))
  do
    while IFS='' read -r -a REPLY
    do
      ls -l "${REPLY[@]}"
    done < <(type -ap "$1")
    shift
  done
}


#######################################
# abspath - determine absolute paths
#
# usage: abspath PATHNAME ...
#######################################
abspath()
{
  local pathname IFS REPLY || return

  if ! (( $# ))
  then
    msg::err "${FUNCNAME[0]}" 'usage' "${FUNCNAME[0]} pathname ..."
  fi
  for pathname
  do
    pathname="${pathname%"${pathname##*[^/]}"}"
    pathname="${pathname/%[^\/]"${pathname:1}"/"./${pathname}"}"
    if [[ -d "${pathname:=/}" ]]
    then
      if wait "$!"
      then
        IFS='' read -r -d '' REPLY
        printf '%s\n' "${REPLY%?}"
      fi < <(CDPATH='' cd -- "${pathname}" && pwd && printf '\0')
    elif wait "$!"
    then
      IFS='' read -r -d '' REPLY
      printf '%s\n' "${REPLY%?}/${pathname##*/}"
    fi < <(CDPATH='' cd -- "${pathname%/*}/" && pwd && printf '\0')
    shift
  done
}


#######################################
# add-alias - adds an alias to bash aliases file 
#
# usage: addalias NAME[=VALUE] ...
#
# @NAME: the name of an alias
# @VALUE: optionally, a value to assign to name
#
# Return: 2 if called with the wrong number of arguments,
# 1 if name is invalid or value is not given and name does not exist,
# 0 otherwise.
#######################################
addalias()
{
  local OPTARG
  local OPTIND=1
  local option
  local output="${BASH_ALIASES_FILE:-${HOME-}/.bash_aliases}"
  local string

  while getopts ':o:h' option
  do
    case "${option}" in
      o ) output="${OPTARG}"
        ;;
      h ) msg::std "${FUNCNAME[0]}"  'usage: %s [-o file] name[=value] ...'
        ;;&
      : ) msg::err "${FUNCNAME[0]}" "-${OPTARG}" 'option requires an argument'
        ;;&
      \?) msg::err "${FUNCNAME[0]}" "-${OPTARG}" 'invalid option'
        ;;&
      * ) return 2
    esac
  done
  shift "$((OPTIND - 1))"
  for string
  do
    if [[ ${string} == *=* ]]
    then
      alias -- "${string}" "${string%%=*}"
    else
      alias -- "${string}"
    fi
  done 1>> "${output}"
}


#######################################
# pushtempd - make a temp directory and push it onto the directory stack
#
# usage: pushtemp [TEMPLATE]
#
# @TEMPLATE: directory name template (must contain 3 or more consecutive X's)
#######################################
pushtempd()
{
  case "$#" in
    1)
      set -- "${1@Q}"
      ;;
    0)
      set -- '\l-$$-\s-\D{%Y%m%dT%H%M%S}-XXXXXX'
      ;;
    *)
      msg::err "${FUNCNAME[0]}" 'usage' "${FUNCNAME[0]} [template]"
      return 2
      ;;
  esac
  if wait "$!"
  then
    pushd -- "$(cat)"
  fi < <(mktemp -d -- "${1@P}")
}


#######################################
# Assign a value to a variable by reference
# Usage:
#   assign_by_ref NAME [VALUE]
# Globals:
#   BASH_REMATCH
# Arguments:
#   NAME: variable name
#   VALUE: value to assign
# Return:
#   1 if given an invalid identifier or a bad array subscript,
#   2 if given the wrong number of arguments,
#   0 otherwise
#######################################
assign_by_ref()
{
  if (( $# < 2 ))
  then
    msg::err "${FUNCNAME[0]}" 'usage' "${FUNCNAME[0]} name value ..."
    return 2
  fi
  if [[ $1 =~ ^([[:alpha:]_][[:alnum:]_]*)(\[(.*)])?$ ]]
  then
    if [[ -z ${BASH_REMATCH[2]} ]]
    then
      if (( $# > 2 ))
      then
        eval "$1"'=("${@:2}")'
      else
        eval "$1"'=$2'
      fi
    elif [[ ${!BASH_REMATCH[1]@a} == *A* ]]
    then
      if (( $# > 2 ))
      then
        eval "${BASH_REMATCH[1]}[${BASH_REMATCH[3]@Q}]"'=("${@:2}")'
      else
        eval "${BASH_REMATCH[1]}[${BASH_REMATCH[3]@Q}]"'=$2'
      fi
    elif (( $((BASH_REMATCH[3])), 1 )) 2>/dev/null
    then
      if (( $# > 2 ))
      then
        eval "${BASH_REMATCH[1]}[$((BASH_REMATCH[3]))]"'=("${@:2}")'
      else
        eval "${BASH_REMATCH[1]}[$((BASH_REMATCH[3]))]"'=$2'
      fi
    else
      msg::err "${FUNCNAME[0]}" "${BASH_REMATCH[0]}" 'bad array subscript'
    fi
  else
    msg::err "${FUNCNAME[0]}" "$1" 'not a valid identifier'
  fi
}
