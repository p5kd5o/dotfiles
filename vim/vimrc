" ~/.vimrc : vim configuration
" ViM version 8.0
"
" always encode in utf-8
set encoding=utf-8

" use vim defaults (rather than Vi)
set nocompatible


" -- Filetype Detection --
"
" detect, load plugins, & apply indent style
filetype plugin indent on
"
" perform syntax highlighting
syntax enable


" -- Formatting --
"
" insert spaces insted of tab characters
set expandtab
"
" number of spaces to use for each indent
set shiftwidth=2
"
" number of spaces to insert as a tab
set softtabstop=2
"
" visual width of a tab character
set tabstop=2
"
" line length beyond which insertion will cause a linebreak
set textwidth=80


" -- Searching & Pattern Matching --
"
" do not highlight search results
set nohlsearch
"
" search forward as a pattern is being typed
set incsearch
"
" ignore case when pattern matching
set ignorecase
"
" respect case if pattern contains uppercase characters
set smartcase
"
" briefly jump to match upon completing a pair in 'matchpairs'
set showmatch


" -- Information & Verbosity --
"
" display line numbers
set number
"
" display cursor coordinates (e.g. LINE,COLUMN)
set ruler
"
" display the most recent command below buffer windows
set showcmd
"
" disable alerts about searches wrapping to other end of file
set terse
"
"set name of file in focused buffer as window title
set title
"
" highlight columns relative to 'textwidth'
set colorcolumn=+1,+2,+3,+5
"
" non-printable characters and lines larger than available space in window
set display=truncate,uhex
"
" always show the status line
set laststatus=2



" -- Cursor & Scrolling --
"
" attempt to preserve cursor position when moving linewise
set nostartofline
"
" allow a way to backspace over each additional item
set backspace=indent,eol,start
"
" allow visual-block selection of text-free columns
set virtualedit=block
"
" lines of padding in between the cursor and window boundary
set scrolloff=4
"
" columns of padding between cursor and window boundary (when 'wrap' is off)
set sidescrolloff=4
"
" minimum number of columns to scroll horizontally (when 'wrap' is off)
set sidescroll=1


" -- Key Timeout --
"
" time out on mappings and keycodes
set timeout
"
" time in milliseconds to wait for completion of a mapping
set timeoutlen=2250
"
" time out on mappings and keycodes
set ttimeout
"
" time in milliseconds to wait for completion of a key code
set ttimeoutlen=115


" -- History --
"
" size of the command history 
set history=1000
"
" maximum number of characters allowed between swapfile updates
set updatecount=160
"
" directory preferences for location of swap files
set directory=${XDG_CACHE_HOME}/vim/swap,~/.vim/swap,.,${XDG_RUNTIME_DIR}/vim
"
" save undo history to a file
set undofile
"
" number of changes that can be undone
set undolevels=3000
"
" directory for location of undo files
set undodir=${XDG_DATA_HOME}/vim/undo,~/.vim/undo,.


" -- Buffers --
"
" re-read open file if it was changed elsewhere
set autoread
"
" hide buffers rather than unloading them
set hidden
"
" place new window below the current
set splitbelow
"
" place new window right of the current
set splitright


" -- Completion --
"
" settings for insert-mode completion
set completeopt=menu,preview,longest,noselect
"
" enable the command-completion menu
set wildmenu
"
" ignore filename case for completions
set wildignorecase
"
" complete common prefix & list options, then cycle through options
set wildmode=list:longest,full


" -- Terminal --
"
" fuck terminal bells
set belloff=backspace,cursor,complete,error,esc,showmatch,wildmode
"
" enable mouse functionality in all modes
set mouse=a


" -- Colors --
"
" set editor colorscheme
if &g:t_Co == 256
  colorscheme desertExP
endif


" -- Python --
"
set pyxversion=3                " Set preferred version of Python
"
let python_highlight_all  = 1   " enable all available highlighting for Python


" -- C / C++ --
"
let c_comment_strings     = 1   " allow strings & numbers inside C comments


" -- Shells --
"
let g:is_posix            = 1   " set posix as default syntax for .sh files
let g:sh_fold_enabled     = 3   " if/do/for=4 here-docs=2 functions=1
let g:sh_no_error         = 1   " relax error detection when editing .sh files
"
let readline_has_bash     = 1   " highlight additions available through bash
"
let highlight_sedtabs     = 1   " highlight real tab characters in sed scripts


" -- Mappings --

" Split to a new terminal window
map <F4> :ter <CR>
"
" Toggle syntax highlighting on/off
map <F7> :if exists("g:syntax_on") <Bar>
  \   syntax off <Bar>
  \ else <Bar>
  \   syntax enable <Bar>
  \ endif <CR>
"
" Search for selected text ('*'/'#' := forward/backward, 'n'/'N' := next/prev)
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
"
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

