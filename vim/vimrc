" ~/.vimrc : vim startup file
" Vim version 8.0


" Use Vim defaults (rather than Vi)
set nocompatible

" Always encode in utf-8
set encoding=utf-8



" -- Filetype & Syntax --

" Detect filetype, load plugins, and apply indentation style
filetype plugin indent on

" Perform syntax highlighting
syntax enable



" -- Tabs & Textwidth --

" Insert spaces insted of tab characters
set expandtab

" Number of columns reserved for line numbers
set numberwidth=3

" Number of spaces to use for each indent
set shiftwidth=2

" Number of spaces to insert as a tab
set softtabstop=2

" Visual width of a real tab '\t' character
set tabstop=8

" Length beyond which insertion forces a linebreak
if &modifiable == 1
  set textwidth=78
else
  set textwidth=0
endif



" -- Patterns & Searching --

" Do not highlight search results
set nohlsearch

" Search forward as pattern is typed
set incsearch

" Ignore case by default
set ignorecase

" Respect case if pattern contains uppercase
set smartcase



" -- Verbosity & Info --

" Display line numbers
set number

" Display line numbers relative to current line
set relativenumber

" Display cursor coordinates (e.g. LINE,COLUMN)
set ruler

" Display most recent command below window
set showcmd

" Briefly jump to match upon completing pair in 'matchpairs'
set showmatch

" Highlight columns relative to 'textwidth'
set colorcolumn=+1

" Show last line as @@@ if truncated
set display=truncate

" Always show status line
set laststatus=2



" -- Editing --

" Attempt to preserve cursor position when moving linewise
set nostartofline

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Additional bases for Ctrl-A (increment) / Ctrl-X (decrement)
set nrformats=bin,hex

" Lines of padding between cursor and edge of window
set scrolloff=4

" If 'nowrap' is set, minimum number of columnss to scroll at a time
set sidescroll=1

" If 'nowrap' is set, columns of padding between cursor and edge of window
set sidescrolloff=4

" Allow visual-block selection of empty columns
set virtualedit=block



" -- Buffers --

" Re-read open file if it was changed by another program
set autoread

" Hide closed buffers rather than unloading them
set hidden

" Split off new windows below the current
set splitbelow

" Split off new windows to the right of the current
set splitright



" -- Completion --

" Enable command completion
set wildmenu

" Ignore case for filename completions
set wildignorecase

" Insert-mode completion behavior
set completeopt=menu,preview,noselect

" Cmdline-mode completion behavior
set wildmode=list:longest,full



" -- Key Timeout --

" Time out on mappings and keycodes
set timeout

" Time in milliseconds to wait for completion of a mapping
set timeoutlen=1360

" Time in milliseconds to wait for completion of a key code
set ttimeoutlen=136



" -- History  --

" Size of the command history 
set history=500

" Size of a file's undo history
set undolevels=1500



" -- Swapfile Directory --

" Initialize directory preference list
set directory=

" Check for XDG_DATA_HOME
if $XDG_DATA_HOME != ''

  " Non-null so check if the target exists; if not, make it
  if ! isdirectory(expand('$XDG_DATA_HOME/vim/swap/'))
    silent! call system('install -dm 700 "$XDG_DATA_HOME/vim/swap"')
  endif

  " Append to the directory list
  set directory+=$XDG_DATA_HOME/vim/swap/

" XDG_DATA_HOME is null, so check HOME
elseif $HOME != ''

  " Home is non-null so check if the target exists; if not, make it
  if ! isdirectory(expand('$HOME/.local/share/vim/swap/'))
    silent! call system('install -dm 700 "$HOME/.local/share/vim/swap"')
  endif

  " Append to the directory list
  set directory+=$HOME/.local/share/vim/swap/

endif

" Fallback to the directory of the given file
set directory+=./,/var/tmp/,/tmp/



" -- Terminal --

" F*** terminal bells
set belloff=backspace,cursor,complete,error,esc,showmatch,wildmode

" Enable mouse functionality
if has('mouse')
  set mouse=a
endif

" Set terminal colorscheme
if &g:t_Co >= 256
  colorscheme calmar256-darkP
elseif &g:t_Co >= 88
  colorscheme inkpotP
endif



" -- GUI --

if has('gui_running')

" Make shift-insert work like in xterm
  map  <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>

" Set gui colorscheme
  colorscheme candyP
endif



" -- Man --

runtime ftplugin/man.vim        " Load the man plugin

set keywordprg=:Man             " Make the K cmd split off new windows

let g:ft_man_open_mode = 'vert' " Open man pages off to the side
 
" Set options upon detecting a man file
autocmd FileType man setlocal colorcolumn= nomodifiable



" -- Python --

let python_highlight_all= 1 " Enable all available Python highlighting

if has('python3')           " Prefer Python 3
  set pyxversion=3
elseif has('python2')       " Fallback to Python 2
  set pyxversion=2
endif


" -- C / C++ --

let c_comment_strings   = 1 " Allow strings & numbers inside comments
let c_gnu               = 1 " Highlight GNU specific items
let c_space_errors      = 1


" -- Readline --

let readline_has_bash   = 1 " Highlight additions available through bash


" -- Sh --

let g:is_posix          = 1 " POSIX highlighting for ambiguous *.sh files
let g:sh_fold_enabled   = 3 " Folding mode (function + if/do/for)
let g:sh_no_error       = 1 " Relax error detection


" -- Sed --

let highlight_sedtabs   = 1 " Highlight real tabs in sed scripts



" -- Mappings--

" Define key to act as <leader> in mappings
let mapleader = ','         


" Quote word under or before the cursor (see :help word)
" Note: Requires that 'selection' be set to "inclusive" or "exclusive"

nnoremap <leader>' vl<esc>bi'<esc>ea'<esc>l
nnoremap <leader>" vl<esc>bi"<esc>ea"<esc>l
nnoremap <leader>( vl<ESC>bi(<ESC>ea)<ESC>l
nnoremap <leader>{ vl<ESC>bi{<ESC>ea}<ESC>l
nnoremap <leader>[ vl<ESC>bi[<ESC>ea]<ESC>l


" Quote WORD under or before the cursor (see :help WORD)
" Note: Requires that 'selection' be set to "inclusive" or "exclusive"

nnoremap <leader><leader>' vl<ESC>Bi'<ESC>Ea'<ESC>l
nnoremap <leader><leader>" vl<ESC>Bi"<ESC>Ea"<ESC>l
nnoremap <leader><leader>( vl<ESC>Bi(<ESC>Ea)<ESC>l
nnoremap <leader><leader>{ vl<ESC>Bi{<ESC>Ea}<ESC>l
nnoremap <leader><leader>[ vl<ESC>Bi[<ESC>Ea]<ESC>l


" Toggle syntax highlighting
" Note: Does not override current colorscheme

nnoremap <silent><F7> 
  \:if exists('g:syntax_on')
  \<Bar> syntax off <Bar>
  \else <Bar>
  \  syntax enable <Bar>
  \endif <CR>


" Search forward for the current visual selection
" Note: Jumping to a tag does not set the current search pattern

vnoremap <silent> * :<C-U>let old_reg=getreg('"')<Bar>
  \let old_regtype=getregtype('"')<CR>gvy/<C-R><C-R>
  \=substitute(escape(@",'/\.*$^~['),'\_s\+','\\_s\\+','g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>


" Search backward for the current visual selection
" Note: Jumping to a tag does not set the current search pattern

vnoremap <silent> # :<C-U>let old_reg=getreg('"')<Bar>
  \let old_regtype=getregtype('"')<CR>\gvy?<C-R><C-R>
  \=substitute(escape(@",'?\.*$^~['),'\_s\+','\\_s\\+','g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>



" -- Security --

set key=                        " Key used for encrypting the current buffer
set cryptmethod=blowfish2       " Cipher for files written to disk
set secure                      " Careful in case someone else owns this file
