## Aliases for docker
## Patrick DeYoreo <pdeyoreo@gmail.com>


## Basic docker command aliases

alias doc='docker'
alias doc.attach='docker attach'
alias doc.build='docker build'
alias doc.commit='docker commit'
alias doc.config='docker config'
alias doc.container='docker container'
alias doc.cp='docker cp'
alias doc.create='docker create'
alias doc.diff='docker diff'
alias doc.events='docker events'
alias doc.exec='docker exec'
alias doc.export='docker export'
alias doc.help='docker help'
alias doc.history='docker history'
alias doc.image='docker image'
alias doc.images='docker images'
alias doc.import='docker import'
alias doc.info='docker info'
alias doc.inspect='docker inspect'
alias doc.kill='docker kill'
alias doc.load='docker load'
alias doc.login='docker login'
alias doc.logout='docker logout'
alias doc.logs='docker logs'
alias doc.network='docker network'
alias doc.node='docker node'
alias doc.pause='docker pause'
alias doc.plugin='docker plugin'
alias doc.port='docker port'
alias doc.ps='docker ps'
alias doc.kill='docker kill'
alias doc.pull='docker pull'
alias doc.push='docker push'
alias doc.rename='docker rename'
alias doc.restart='docker restart'
alias doc.rm='docker rm'
alias doc.rmi='docker rmi'
alias doc.run='docker run'
alias doc.save='docker save'
alias doc.search='docker search'
alias doc.secret='docker secret'
alias doc.service='docker service'
alias doc.stack='docker stack'
alias doc.start='docker start'
alias doc.stats='docker stats'
alias doc.stop='docker stop'
alias doc.swarm='docker swarm'
alias doc.system='docker system'
alias doc.tag='docker tag'
alias doc.top='docker top'
alias doc.trust='docker trust'
alias doc.unpause='docker unpause'
alias doc.update='docker update'
alias doc.version='docker version'
alias doc.volume='docker volume'
alias doc.wait='docker wait'



## Stop all running containers
alias doc.stopall='docker stop $(docker ps -q) 2>/dev/null'

## Kill all running containers
alias doc.killall='docker kill $(docker ps -q) 2>/dev/null'

## Remove all dead containers
alias doc.rmdead='docker rm $(docker ps -aq) 2>/dev/null'

## Remove all containers
alias doc.rmall='{ doc.kill $(doc.ps -q); doc.rm $(doc.ps -aq); } 2>/dev/null'



## Create a new jupyter datascience notebook container
## usage: doc.jupyter-notebook [-d] [--rm] [-p host-port] [-v host-directory]
doc.jupyter-notebook() {

  ## Try to initialize local variables
  if local cmd=( ) help=''; then
    ## Define generic command and generate usage message
    cmd=( docker run --tty )
    printf -v help 'usage: %q [-d] [--rm] [-p host-port] [-v host-dir]' \
      "${FUNCNAME}"
  else
    ## Print error message and return error code
    printf "%q: %q: Unable to initialize local variables\n" 1>&2 \
      "${0##*/}" "${FUNCNAME}"
    return 3
  fi

  ## Parse options and construct command
  while (( $# )); do
    case $1 in

     -p|--port)
        shift
        cmd+=( -p "${1:-"${JOVYAN_PORT:-"8888"}"}:8888" )
        shift || break
        ;;

      -v|--volume)
        shift
        cmd+=( -v "${1:-"${JOVYAN_WORK:-"${PWD}"}"}:/home/jovyan/work" )
        shift || break
        ;;

      -d|--detach)
        cmd+=( -d )
        shift
        ;;

      --rm)
        cmd+=( --rm )
        shift
        ;;

      -h|--help)
        printf '%s\n' "${help}"
        return 0
        ;;

      *)
        printf '%s\n' "${help}" 1>&2
        return 2
        ;;

    esac
  done


  ## Run jupyter-notebook
  "${cmd[@]}" jupyter/datascience-notebook
}



## vim:et:ft=sh:sts=2:sw=2:ts=8
