#!/usr/bin/env bash
## mathlib : a collection of variables & functions for doing math in bash



## -- Global variables

### Determine the max integer value
#case ${BASH_VERSINFO[-1]%%-*} in
#  x86_64)
#    __math_INT_MAX=$(( 2 ** 64 - 1 ))
#    ;;
#  x86)
#    __math_INT_MAX=$(( 2 ** 32 - 1 ))
#    ;;
#esac



## -- Arithmetic

## Evaluate expression produced by joining args with IFS
math::__operate() { 
  printf "${outputfmt:-%d}\n" "$(( "$*" ))"
}

## Multiply arguments
math::multiply() {
    IFS='*' math::__operate "$@"
}

## Divide arguments
math::divide() {
    IFS='/' math::__operate "$@"
}

## Add arguments
math::add() {
    IFS='+' math::__operate "$@"
}

## Subtract arguments
math::subtract() {
    IFS='-' math::__operate "$@"
}

## Bitwise xor arguments
math::xor() {
    IFS='^' math::__operate "$@"
}

## Bitwise and arguments
math::and() {
    IFS='&' math::__operate "$@"
}

## Bitwise or arguments
math::or() {
    IFS='|' math::__operate "$@"
}



## Print elements of the fibonacci sequence
## usage: math::fibonacci [count] [start]
math::fibonacci() { 

  ## Initialize sequence values / index / element count / start & end indices
  if local curr=0 next=1 index=0 &&
     local count=$(( $(( ${count:-$1} )) > 0 ? $(( ${count:-$1} )) : 10 )) &&
     local start=$(( $(( ${start:-$2} )) > 0 ? $(( ${start:-$2} )) : 1  )) &&
     local end=$(( start + count ))
  then

    ## Compute seq until end index is reached or max int limit is surpassed
    while (( ++index < end && next >= curr )); do
      ## Print current value, skipping elements occuring before start index
      (( index < start )) || printf "${output_fmt:-%d}\n" "$(( curr ))"
      ## Compute the next two sequence elements
      ((  next += curr, curr = next - curr ))
    done

    ## If max integer limit was surpassed, print message and return error (2)
    (( next >= curr )) || {
      printf "%q: integer overflow\n" "${FUNCNAME}" 1>&2
      return 3
    }

  else
    ## If local variables could not be set, return status (10)
    printf "%q: failed to initialize local variables\n" "${FUNCNAME}" 1>&2
    return 10
  fi
}
