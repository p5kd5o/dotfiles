"" ~/.vimrc : vim startup file
"" ViM version 8.0


"" Use Vim defaults (rather than Vi)
set nocompatible

"" Always encode in utf-8
set encoding=utf-8



"" -- Filetype & Syntax --

"" Detect, load plugins, & apply indent style
if has('autocmd')
  filetype plugin indent on
endif

"" Turn on syntax highlighting (do not override colorscheme)
if &t_Co > 2 || has('gui_running')
  syntax enable
endif



"" -- Tabs & Formatting --
""
"" Insert spaces insted of tab characters
set expandtab

"" Number of columns reserved for line numbers
set numberwidth=2

"" Number of spaces to use for each indent
set shiftwidth=2

"" Number of spaces to insert as a tab
set softtabstop=2

"" Visual width of a tab character
set tabstop=8

"" Length beyond which insertion will cause a linebreak
if &filetype =~? '^(conf|man)$'
  set textwidth=78
endif



"" -- Patterns & Searching --
""
"" Do not highlight search results
set nohlsearch

"" Search forward as pattern is typed
set incsearch

"" Ignore case by default
set ignorecase

"" Respect case if pattern contains uppercase
set smartcase



"" -- Verbosity & Info Visibility --
""
"" Display line numbers
set number

"" Display line numbers relative to current line
set relativenumber

"" Display cursor coordinates (e.g. LINE,COLUMN)
set ruler

"" Display most recent command below window
set showcmd

"" Briefly jump to match upon completing pair in 'matchpairs'
set showmatch

"" Highlight columns relative to 'textwidth'
set colorcolumn=+1

"" Show last line as @@@ if truncated
set display=truncate

"" Always show status line
set laststatus=2



"" -- Editing --
""
"" Attempt to preserve cursor position when moving linewise
set nostartofline

"" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

"" Additional bases for Ctrl-A (increment) / Ctrl-X (decrement)
set nrformats=bin,hex

"" Lines of padding between cursor and edge of window
set scrolloff=4

"" If 'nowrap' is set, minimum number of columnss to scroll at a time
set sidescroll=1

"" If 'nowrap' is set, columns of padding between cursor and edge of window
set sidescrolloff=4

"" Allow visual-block selection of empty columns
set virtualedit=block



"" -- Buffers --
""
"" Re-read open file if it was changed by another program
set autoread

"" Hide closed buffers rather than unloading them
set hidden

"" Split off new windows below the current
set splitbelow

"" Split off new windows to the right of the current
set splitright



"" -- Completion --
""
"" Enable command completion
set wildmenu

"" Ignore case for filename completions
set wildignorecase

"" Insert-mode completion behavior
set completeopt=menu,preview,noselect

"" Cmdline-mode completion behavior
set wildmode=list:longest,full



"" -- Key Timeout --
""
"" Time out for mappings
set timeout

"" Time in milliseconds to wait for completion of a mapping
set timeoutlen=2000

"" Time out for keycodes
set ttimeout

"" Time in milliseconds to wait for completion of a key code
set ttimeoutlen=120



"" -- History & Backups --
""
"" Save each file's undo history
set undofile

"" Size of the command history 
set history=500

"" Size of a file's undo history
set undolevels=1500

"" Update the swap file after typing this many characters
set updatecount=160

"" Location of backups
set backupdir=
      \${XDG_DATA_HOME}/vim/backup,
      \~/.local/share/vim/backup,
      \~/.vim/backup,
      \${TMPDIR}/vim/backup,
      \~/tmp/vim/backup,
      \${XDG_RUNTIME_DIR}/vim/backup,
      \.,
      \${TMPDIR},
      \~/tmp,
      \${XDG_RUNTIME_DIR}

"" Location of swap files
set directory=
      \${XDG_DATA_HOME}/vim/swap,
      \~/.local/share/vim/swap,
      \~/.vim/swap,
      \${TMPDIR}/vim/swap,
      \~/tmp/vim/swap,
      \${XDG_RUNTIME_DIR}/vim/swap,
      \.,
      \${TMPDIR},
      \~/tmp,
      \${XDG_RUNTIME_DIR}

"" Location of undo files
set undodir=
      \${XDG_DATA_HOME}/vim/undo,
      \~/.local/share/vim/undo,
      \~/.vim/undo,
      \${TMPDIR}/vim/undo,
      \~/tmp/vim/undo,
      \${XDG_RUNTIME_DIR}/vim/undo



"" -- Terminal --
""
"" Fuck terminal bells
set belloff=backspace,cursor,complete,error,esc,showmatch,wildmode

"" Enable mouse functionality
if has('mouse')
  set mouse=a
endif



"" -- Colors --
""
"" Set editor colorscheme
if &g:t_Co == 256 || has('gui_running')
  colorscheme calmar256-darkP
elseif &g:t_Co == 88
  colorscheme inkpotP
endif



"" -- Man --
""
runtime ftplugin/man.vim        " Load the man plugin
let g:ft_man_open_mode = 'vert' " Split man windows off to the side



"" -- Python --
""
let python_highlight_all = 1    " Enable all available syntax highlighting

if &g:pyxversion == 0           " Set default version if none has been set
  if has('python3')
    set pyxversion=3            " Choose 3 if available
  elseif has('python2')
    set pyxversion=2            " Fallback to 2
  endif
endif



"" -- C / C++ --
""
let c_comment_strings = 1       " Allow strings & numbers inside comments
let c_gnu             = 1       " Highlight GNU specific items



"" -- Readline --
""
let readline_has_bash = 1       " Highlight additions available through bash



"" -- Sh --
""
let is_posix        = 1         " POSIX highlighting for ambiguous *.sh files
let sh_fold_enabled = 3         " Folding mode b'0110'
let sh_no_error     = 1         " Relax error detection



"" -- Sed --
""
let highlight_sedtabs = 1       " Highlight real tabs in sed scripts



"" -- Mappings --
""
let mapleader = ','             " Define key to act as <leader> in mappings


"" Quote word under or before the cursor (see :help word)
"" Note: Requires that 'selection' be set to "inclusive" or "exclusive"
""
nnoremap <leader>' vl<esc>bi'<esc>ea'<esc>l
nnoremap <leader>" vl<esc>bi"<esc>ea"<esc>l
nnoremap <leader>( vl<ESC>bi(<ESC>ea)<ESC>l
nnoremap <leader>{ vl<ESC>bi{<ESC>ea}<ESC>l
nnoremap <leader>[ vl<ESC>bi[<ESC>ea]<ESC>l


"" Quote WORD under or before the cursor (see :help WORD)
"" Note: Requires that 'selection' be set to "inclusive" or "exclusive"
""
nnoremap <leader><leader>' vl<ESC>Bi'<ESC>Ea'<ESC>l
nnoremap <leader><leader>" vl<ESC>Bi"<ESC>Ea"<ESC>l
nnoremap <leader><leader>( vl<ESC>Bi(<ESC>Ea)<ESC>l
nnoremap <leader><leader>{ vl<ESC>Bi{<ESC>Ea}<ESC>l
nnoremap <leader><leader>[ vl<ESC>Bi[<ESC>Ea]<ESC>l


"" Toggle syntax highlighting
"" Note: Does not override current colorscheme
""
nnoremap <silent><F7> 
  \
  \:if exists('g:syntax_on')
  \<Bar> syntax off <Bar>
  \else <Bar>
  \  syntax enable <Bar>
  \endif <CR>


"" Search forward for the current visual selection
"" Note: Jumping to a tag does not set the current search pattern
""  
vnoremap <silent> *
  \
  \:<C-U>
  \let old_reg=getreg('"')<Bar>
  \let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>
  \=substitute(escape(@",'/\.*$^~['),'\_s\+','\\_s\\+','g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>


"" Search backward for the current visual selection
"" Note: Jumping to a tag does not set the current search pattern
""  
vnoremap <silent> #
  \
  \:<C-U>
  \let old_reg=getreg('"')<Bar>
  \let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>
  \=substitute(escape(@",'?\.*$^~['),'\_s\+','\\_s\\+','g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>



"" -- Security --
""
set cryptmethod=blowfish2       " Cipher for files written to disk
set secure                      " Used if vimrc or exrc is not owned by me
