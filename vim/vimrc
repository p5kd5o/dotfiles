" ~/.vimrc : vim configuration
" ViM version 8.0

" always encode in utf-8
set encoding=utf-8

" use vim defaults (rather than Vi)
set nocompatible


" -- Filetype & Syntax --
"
" detect filetype, load plugins, & apply indentation style
filetype plugin indent on
"
" perform syntax highlighting
syntax enable


" -- Formatting --
"
" insert spaces insted of tab characters
set expandtab
"
" number of spaces to use for each indent
set shiftwidth=2
"
" number of spaces to insert as a tab
set softtabstop=2
"
" visual width of a tab character
set tabstop=2
"
" line length beyond which insertion will cause a linebreak
set textwidth=79


" -- Searching & Pattern Matching --
"
" search forward as a pattern is being typed
set incsearch
"
" do not highlight search results
set nohlsearch
"
" ignore case when matching a pattern
set ignorecase
"
" respect case if pattern contains uppercase
set smartcase
"
" briefly jump to match upon completing pair from 'matchpairs'
set showmatch
"
" tuples of characters to match as pairs
set matchpairs=(:),{:},[:]


" -- Information Visibility --
"
" display line numbers
set number
"
" display current coordinates (line:column) of the cursor
set ruler
"
" set name of file in focused buffer as window title
set title
"
" disable message about search wrapping across a file
set terse
"
" display most recent command below the buffer windows
set showcmd
"
" highlight the line the cursor is currently on
set cursorline
"
" always display the status line
set laststatus=2
"
" display last line in window as "@@@" if it doesn't fit
" display unprintable characters in hex as <xx>
set display=truncate,uhex
"
" highlight columns relative to 'textwidth'
set colorcolumn=+1,+2,+3,+5,+7,+9

" -- Cursor Position & Movement --
"
" attempt to preserve cursor position when moving linewise 
set nostartofline
"
" allow a way to backspace over each additional item
set backspace=indent,eol,start
"
" allow visual-block selection of text-free columns
set virtualedit=block
"
" size of padding between the cursor and the vertical edges
set scrolloff=3
"
" scroll horizontally one column at a time when 'wrap' is off
set sidescroll=1
"
" size of padding between cursor and horiz. edges when 'wrap' is off
set sidescrolloff=3


" -- Key Timeout --
"
" time out on mappings and keycodes
set timeout
"
" time in milliseconds to wait for completion of a mapping
set timeoutlen=2250
"
" time out on mappings and keycodes
set ttimeout
"
" time in milliseconds to wait for completion of a key code
set ttimeoutlen=115


" -- History --
"
" size of the command history
set history=10000
"
" save undo history while editing a file
set undofile
"
" maximum number of changes that can be undone
set undolevels=10000
"
" save undofile in first existing, writable directory 
set undodir=~/.vim/undo,~/.vim,~/.local/share/vim,.,~/tmp,$TMPDIR,/tmp
"
" save swapfile in first existing, writable directory 
set directory=~/.vim/swap,~/.vim,~/.local/share/vim,.,~/tmp,$TMPDIR,/tmp


" -- Buffers --
"
" re-read open file if it was changed elsewhere
set autoread
"
" hide buffers rather than unloading them
set hidden
"
" place new window below the current
set splitbelow
"
" place new window right of the current
set splitright


" -- Completion --
"
set completeopt=menu,preview,longest,noselect
"
" enable the command-completion menu
set wildmenu
"
" ignore filename case for completions
set wildignorecase
"
" complete common prefix & list options, then cycle through options
set wildmode=list:longest,full


" -- Terminal --
"
" fuck terminal bells
set belloff=backspace,cursor,complete,error,esc,showmatch,wildmode
"
" enable mouse functionality in all modes
set mouse=a


" -- Colors --
"
" set editor colorscheme
if &g:t_Co == 256
  colorscheme desertX
endif

" highlight the line number of the current line
highlight CursorLine   NONE
highlight CursorLineNr NONE
highlight CursorLineNr term=bold cterm=bold gui=bold


" -- Language-Specific Syntax Options --
"
" C / C++
let c_comment_strings     = 1   " allow strings & numbers inside C comments
let g:lisp_rainbow        = 1   " highlight Lisp based on parenthesization
let python_highlight_all  = 1   " enable all available highlighting for Python
"
" Readline
let readline_has_bash     = 1   " highlight readline additions from by bash
"
" Sed
let highlight_sedtabs     = 1   " should be using '\t' so highlight real tabs
"
" Shells
let g:is_posix            = 1   " set default syntax for *.sh files
let g:sh_fold_enabled     = 1   " enable function & heredoc folding
let g:sh_no_error         = 1   " relax error detection in sh files


" -- Mappings --
"
" Toggle syntax highlighting on/off
map <F7> :if exists("g:syntax_on") <Bar>
  \   syntax off <Bar>
  \ else <Bar>
  \   syntax enable <Bar>
  \ endif <CR>


" Search for selected text ('*'/'#' := forward/backward, 'n'/'N' := next/prev)
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>


" -- end --
